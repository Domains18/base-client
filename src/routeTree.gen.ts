/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UrlShortenerRouteImport } from './routes/url-shortener'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as PasswordsRouteImport } from './routes/passwords'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DocumentsRouteImport } from './routes/documents'
import { Route as CrmRouteImport } from './routes/crm'
import { Route as IndexRouteImport } from './routes/index'

const UrlShortenerRoute = UrlShortenerRouteImport.update({
  id: '/url-shortener',
  path: '/url-shortener',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordsRoute = PasswordsRouteImport.update({
  id: '/passwords',
  path: '/passwords',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentsRoute = DocumentsRouteImport.update({
  id: '/documents',
  path: '/documents',
  getParentRoute: () => rootRouteImport,
} as any)
const CrmRoute = CrmRouteImport.update({
  id: '/crm',
  path: '/crm',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/crm': typeof CrmRoute
  '/documents': typeof DocumentsRoute
  '/login': typeof LoginRoute
  '/passwords': typeof PasswordsRoute
  '/signup': typeof SignupRoute
  '/url-shortener': typeof UrlShortenerRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/crm': typeof CrmRoute
  '/documents': typeof DocumentsRoute
  '/login': typeof LoginRoute
  '/passwords': typeof PasswordsRoute
  '/signup': typeof SignupRoute
  '/url-shortener': typeof UrlShortenerRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/crm': typeof CrmRoute
  '/documents': typeof DocumentsRoute
  '/login': typeof LoginRoute
  '/passwords': typeof PasswordsRoute
  '/signup': typeof SignupRoute
  '/url-shortener': typeof UrlShortenerRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/crm'
    | '/documents'
    | '/login'
    | '/passwords'
    | '/signup'
    | '/url-shortener'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/crm'
    | '/documents'
    | '/login'
    | '/passwords'
    | '/signup'
    | '/url-shortener'
  id:
    | '__root__'
    | '/'
    | '/crm'
    | '/documents'
    | '/login'
    | '/passwords'
    | '/signup'
    | '/url-shortener'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CrmRoute: typeof CrmRoute
  DocumentsRoute: typeof DocumentsRoute
  LoginRoute: typeof LoginRoute
  PasswordsRoute: typeof PasswordsRoute
  SignupRoute: typeof SignupRoute
  UrlShortenerRoute: typeof UrlShortenerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/url-shortener': {
      id: '/url-shortener'
      path: '/url-shortener'
      fullPath: '/url-shortener'
      preLoaderRoute: typeof UrlShortenerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/passwords': {
      id: '/passwords'
      path: '/passwords'
      fullPath: '/passwords'
      preLoaderRoute: typeof PasswordsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documents': {
      id: '/documents'
      path: '/documents'
      fullPath: '/documents'
      preLoaderRoute: typeof DocumentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/crm': {
      id: '/crm'
      path: '/crm'
      fullPath: '/crm'
      preLoaderRoute: typeof CrmRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CrmRoute: CrmRoute,
  DocumentsRoute: DocumentsRoute,
  LoginRoute: LoginRoute,
  PasswordsRoute: PasswordsRoute,
  SignupRoute: SignupRoute,
  UrlShortenerRoute: UrlShortenerRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
